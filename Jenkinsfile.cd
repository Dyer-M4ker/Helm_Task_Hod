pipeline {
    agent any

    options {
        timestamps()
    }

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Docker Hub tag to promote')
        string(name: 'TEST_TAG', defaultValue: 'test', description: 'Suffix for test deployment tag')
    }

    environment {
        DOCKERHUB_REPOSITORY = 'dyer-m4ker/helm-task-hod'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Docker Login & Pull') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    withEnv(["SOURCE_IMAGE=${env.DOCKERHUB_REPOSITORY}:${params.IMAGE_TAG}"]) {
                        bat """
                        docker login -u %DOCKERHUB_USER% -p %DOCKERHUB_PASSWORD%
                        docker pull %SOURCE_IMAGE%
                        """
                    }
                }
            }
        }

        stage('Promote to Test Environment') {
            steps {
                script {
                    env.TEST_IMAGE = "${env.DOCKERHUB_REPOSITORY}:${params.TEST_TAG}-${env.BUILD_NUMBER}"
                }
                withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    withEnv(["SOURCE_IMAGE=${env.DOCKERHUB_REPOSITORY}:${params.IMAGE_TAG}"]) {
                        bat """
                        docker tag %SOURCE_IMAGE% %TEST_IMAGE%
                        docker push %TEST_IMAGE%
                        """
                    }
                }
            }
        }

        stage('Smoke Test Container') {
            steps {
                bat """
                powershell -NoProfile -Command ^
                  "$output = docker run --rm %TEST_IMAGE% add 2 3; ^
                   Write-Host 'Container output:'; ^
                   Write-Host $output; ^
                   if ($output -notmatch 'Result:\\s+5') { ^
                       Write-Error 'Unexpected calculator result'; ^
                       exit 1 ^
                   }"
                """
            }
        }
    }

    post {
        always {
            script {
                if (env.DOCKERHUB_REPOSITORY && params.IMAGE_TAG) {
                    bat """
                    docker image rm %DOCKERHUB_REPOSITORY%:%IMAGE_TAG% 2>nul
                    """
                }
                if (env.TEST_IMAGE) {
                    bat """
                    docker image rm %TEST_IMAGE% 2>nul
                    """
                }
                bat "docker logout" 
            }
        }
    }
}
